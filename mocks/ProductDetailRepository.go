// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	domain "qbills/models/domain"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"
)

// ProductDetailRepository is an autogenerated mock type for the ProductDetailRepository type
type ProductDetailRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: productDetail
func (_m *ProductDetailRepository) Create(productDetail *domain.ProductDetail) (*domain.ProductDetail, error) {
	ret := _m.Called(productDetail)

	var r0 *domain.ProductDetail
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.ProductDetail) (*domain.ProductDetail, error)); ok {
		return rf(productDetail)
	}
	if rf, ok := ret.Get(0).(func(*domain.ProductDetail) *domain.ProductDetail); ok {
		r0 = rf(productDetail)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ProductDetail)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.ProductDetail) error); ok {
		r1 = rf(productDetail)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *ProductDetailRepository) Delete(id uint) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields:
func (_m *ProductDetailRepository) FindAll() ([]domain.ProductDetail, error) {
	ret := _m.Called()

	var r0 []domain.ProductDetail
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]domain.ProductDetail, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []domain.ProductDetail); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.ProductDetail)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAllByIds provides a mock function with given fields: ids
func (_m *ProductDetailRepository) FindAllByIds(ids []uint) ([]domain.ProductDetail, error) {
	ret := _m.Called(ids)

	var r0 []domain.ProductDetail
	var r1 error
	if rf, ok := ret.Get(0).(func([]uint) ([]domain.ProductDetail, error)); ok {
		return rf(ids)
	}
	if rf, ok := ret.Get(0).(func([]uint) []domain.ProductDetail); ok {
		r0 = rf(ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.ProductDetail)
		}
	}

	if rf, ok := ret.Get(1).(func([]uint) error); ok {
		r1 = rf(ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindById provides a mock function with given fields: id
func (_m *ProductDetailRepository) FindById(id uint) (*domain.ProductDetail, error) {
	ret := _m.Called(id)

	var r0 *domain.ProductDetail
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*domain.ProductDetail, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *domain.ProductDetail); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ProductDetail)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByProductId provides a mock function with given fields: ProductID
func (_m *ProductDetailRepository) FindByProductId(ProductID uint) ([]domain.ProductDetail, error) {
	ret := _m.Called(ProductID)

	var r0 []domain.ProductDetail
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) ([]domain.ProductDetail, error)); ok {
		return rf(ProductID)
	}
	if rf, ok := ret.Get(0).(func(uint) []domain.ProductDetail); ok {
		r0 = rf(ProductID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.ProductDetail)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(ProductID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: productDetail, id
func (_m *ProductDetailRepository) Save(productDetail *domain.ProductDetail, id uint) (*domain.ProductDetail, error) {
	ret := _m.Called(productDetail, id)

	var r0 *domain.ProductDetail
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.ProductDetail, uint) (*domain.ProductDetail, error)); ok {
		return rf(productDetail, id)
	}
	if rf, ok := ret.Get(0).(func(*domain.ProductDetail, uint) *domain.ProductDetail); ok {
		r0 = rf(productDetail, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ProductDetail)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.ProductDetail, uint) error); ok {
		r1 = rf(productDetail, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StockDecrease provides a mock function with given fields: tx, productDetail
func (_m *ProductDetailRepository) StockDecrease(tx *gorm.DB, productDetail *domain.ProductDetail) error {
	ret := _m.Called(tx, productDetail)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, *domain.ProductDetail) error); ok {
		r0 = rf(tx, productDetail)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: productDetail, id
func (_m *ProductDetailRepository) Update(productDetail *domain.ProductDetail, id uint) (*domain.ProductDetail, error) {
	ret := _m.Called(productDetail, id)

	var r0 *domain.ProductDetail
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.ProductDetail, uint) (*domain.ProductDetail, error)); ok {
		return rf(productDetail, id)
	}
	if rf, ok := ret.Get(0).(func(*domain.ProductDetail, uint) *domain.ProductDetail); ok {
		r0 = rf(productDetail, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ProductDetail)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.ProductDetail, uint) error); ok {
		r1 = rf(productDetail, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewProductDetailRepository creates a new instance of ProductDetailRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProductDetailRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProductDetailRepository {
	mock := &ProductDetailRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
