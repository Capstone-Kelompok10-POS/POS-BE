// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	domain "qbills/models/domain"

	mock "github.com/stretchr/testify/mock"
)

// AdminRepository is an autogenerated mock type for the AdminRepository type
type AdminRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: admin
func (_m *AdminRepository) Create(admin *domain.Admin) (*domain.Admin, error) {
	ret := _m.Called(admin)

	var r0 *domain.Admin
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.Admin) (*domain.Admin, error)); ok {
		return rf(admin)
	}
	if rf, ok := ret.Get(0).(func(*domain.Admin) *domain.Admin); ok {
		r0 = rf(admin)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Admin)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.Admin) error); ok {
		r1 = rf(admin)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *AdminRepository) Delete(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields:
func (_m *AdminRepository) FindAll() ([]domain.Admin, error) {
	ret := _m.Called()

	var r0 []domain.Admin
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]domain.Admin, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []domain.Admin); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Admin)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindById provides a mock function with given fields: id
func (_m *AdminRepository) FindById(id int) (*domain.Admin, error) {
	ret := _m.Called(id)

	var r0 *domain.Admin
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*domain.Admin, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *domain.Admin); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Admin)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByUsername provides a mock function with given fields: username
func (_m *AdminRepository) FindByUsername(username string) (*domain.Admin, error) {
	ret := _m.Called(username)

	var r0 *domain.Admin
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.Admin, error)); ok {
		return rf(username)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.Admin); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Admin)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: admin, id
func (_m *AdminRepository) Update(admin *domain.Admin, id int) (*domain.Admin, error) {
	ret := _m.Called(admin, id)

	var r0 *domain.Admin
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.Admin, int) (*domain.Admin, error)); ok {
		return rf(admin, id)
	}
	if rf, ok := ret.Get(0).(func(*domain.Admin, int) *domain.Admin); ok {
		r0 = rf(admin, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Admin)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.Admin, int) error); ok {
		r1 = rf(admin, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAdminRepository creates a new instance of AdminRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAdminRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *AdminRepository {
	mock := &AdminRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
