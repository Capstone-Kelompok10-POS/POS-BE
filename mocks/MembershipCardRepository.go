// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	domain "qbills/models/domain"

	mock "github.com/stretchr/testify/mock"
)

// MembershipCardRepository is an autogenerated mock type for the MembershipCardRepository type
type MembershipCardRepository struct {
	mock.Mock
}

// FindById provides a mock function with given fields: id
func (_m *MembershipCardRepository) FindById(id int) (*domain.Membership, error) {
	ret := _m.Called(id)

	var r0 *domain.Membership
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*domain.Membership, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *domain.Membership); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Membership)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBarcode provides a mock function with given fields: id, barcode
func (_m *MembershipCardRepository) UpdateBarcode(id int, barcode string) (*domain.Membership, error) {
	ret := _m.Called(id, barcode)

	var r0 *domain.Membership
	var r1 error
	if rf, ok := ret.Get(0).(func(int, string) (*domain.Membership, error)); ok {
		return rf(id, barcode)
	}
	if rf, ok := ret.Get(0).(func(int, string) *domain.Membership); ok {
		r0 = rf(id, barcode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Membership)
		}
	}

	if rf, ok := ret.Get(1).(func(int, string) error); ok {
		r1 = rf(id, barcode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMembershipCardRepository creates a new instance of MembershipCardRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMembershipCardRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MembershipCardRepository {
	mock := &MembershipCardRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
