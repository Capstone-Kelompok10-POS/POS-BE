// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	domain "qbills/models/domain"

	mock "github.com/stretchr/testify/mock"
)

// ConvertPointRepository is an autogenerated mock type for the ConvertPointRepository type
type ConvertPointRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: convertPoint
func (_m *ConvertPointRepository) Create(convertPoint *domain.ConvertPoint) (*domain.ConvertPoint, error) {
	ret := _m.Called(convertPoint)

	var r0 *domain.ConvertPoint
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.ConvertPoint) (*domain.ConvertPoint, error)); ok {
		return rf(convertPoint)
	}
	if rf, ok := ret.Get(0).(func(*domain.ConvertPoint) *domain.ConvertPoint); ok {
		r0 = rf(convertPoint)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ConvertPoint)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.ConvertPoint) error); ok {
		r1 = rf(convertPoint)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *ConvertPointRepository) Delete(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields:
func (_m *ConvertPointRepository) FindAll() ([]domain.ConvertPoint, error) {
	ret := _m.Called()

	var r0 []domain.ConvertPoint
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]domain.ConvertPoint, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []domain.ConvertPoint); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.ConvertPoint)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindById provides a mock function with given fields: id
func (_m *ConvertPointRepository) FindById(id int) (*domain.ConvertPoint, error) {
	ret := _m.Called(id)

	var r0 *domain.ConvertPoint
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*domain.ConvertPoint, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *domain.ConvertPoint); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ConvertPoint)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: convertPoint, id
func (_m *ConvertPointRepository) Update(convertPoint *domain.ConvertPoint, id int) (*domain.ConvertPoint, error) {
	ret := _m.Called(convertPoint, id)

	var r0 *domain.ConvertPoint
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.ConvertPoint, int) (*domain.ConvertPoint, error)); ok {
		return rf(convertPoint, id)
	}
	if rf, ok := ret.Get(0).(func(*domain.ConvertPoint, int) *domain.ConvertPoint); ok {
		r0 = rf(convertPoint, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ConvertPoint)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.ConvertPoint, int) error); ok {
		r1 = rf(convertPoint, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewConvertPointRepository creates a new instance of ConvertPointRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConvertPointRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ConvertPointRepository {
	mock := &ConvertPointRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
