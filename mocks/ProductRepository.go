// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	domain "qbills/models/domain"
	helpers "qbills/utils/helpers"

	mock "github.com/stretchr/testify/mock"
)

// ProductRepository is an autogenerated mock type for the ProductRepository type
type ProductRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: request
func (_m *ProductRepository) Create(request *domain.Product) (*domain.Product, error) {
	ret := _m.Called(request)

	var r0 *domain.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.Product) (*domain.Product, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(*domain.Product) *domain.Product); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.Product) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *ProductRepository) Delete(id uint) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields:
func (_m *ProductRepository) FindAll() ([]domain.Product, int, error) {
	ret := _m.Called()

	var r0 []domain.Product
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func() ([]domain.Product, int, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []domain.Product); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Product)
		}
	}

	if rf, ok := ret.Get(1).(func() int); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FindBestSellingProduct provides a mock function with given fields:
func (_m *ProductRepository) FindBestSellingProduct() ([]domain.BestSellingProduct, error) {
	ret := _m.Called()

	var r0 []domain.BestSellingProduct
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]domain.BestSellingProduct, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []domain.BestSellingProduct); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.BestSellingProduct)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByCategory provides a mock function with given fields: ProductTypeID
func (_m *ProductRepository) FindByCategory(ProductTypeID uint) ([]domain.Product, error) {
	ret := _m.Called(ProductTypeID)

	var r0 []domain.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) ([]domain.Product, error)); ok {
		return rf(ProductTypeID)
	}
	if rf, ok := ret.Get(0).(func(uint) []domain.Product); ok {
		r0 = rf(ProductTypeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(ProductTypeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindById provides a mock function with given fields: id
func (_m *ProductRepository) FindById(id uint) (*domain.Product, error) {
	ret := _m.Called(id)

	var r0 *domain.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*domain.Product, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *domain.Product); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByName provides a mock function with given fields: name
func (_m *ProductRepository) FindByName(name string) ([]domain.Product, error) {
	ret := _m.Called(name)

	var r0 []domain.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]domain.Product, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) []domain.Product); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindPaginationProduct provides a mock function with given fields: orderBy, paginate
func (_m *ProductRepository) FindPaginationProduct(orderBy string, paginate helpers.Pagination) ([]domain.Product, *helpers.Pagination, error) {
	ret := _m.Called(orderBy, paginate)

	var r0 []domain.Product
	var r1 *helpers.Pagination
	var r2 error
	if rf, ok := ret.Get(0).(func(string, helpers.Pagination) ([]domain.Product, *helpers.Pagination, error)); ok {
		return rf(orderBy, paginate)
	}
	if rf, ok := ret.Get(0).(func(string, helpers.Pagination) []domain.Product); ok {
		r0 = rf(orderBy, paginate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(string, helpers.Pagination) *helpers.Pagination); ok {
		r1 = rf(orderBy, paginate)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*helpers.Pagination)
		}
	}

	if rf, ok := ret.Get(2).(func(string, helpers.Pagination) error); ok {
		r2 = rf(orderBy, paginate)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Update provides a mock function with given fields: request, id
func (_m *ProductRepository) Update(request *domain.Product, id uint) (*domain.Product, error) {
	ret := _m.Called(request, id)

	var r0 *domain.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.Product, uint) (*domain.Product, error)); ok {
		return rf(request, id)
	}
	if rf, ok := ret.Get(0).(func(*domain.Product, uint) *domain.Product); ok {
		r0 = rf(request, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.Product, uint) error); ok {
		r1 = rf(request, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewProductRepository creates a new instance of ProductRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProductRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProductRepository {
	mock := &ProductRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
