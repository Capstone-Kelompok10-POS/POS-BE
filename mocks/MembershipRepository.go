// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	domain "qbills/models/domain"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"
)

// MembershipRepository is an autogenerated mock type for the MembershipRepository type
type MembershipRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: membership
func (_m *MembershipRepository) Create(membership *domain.Membership) (*domain.Membership, error) {
	ret := _m.Called(membership)

	var r0 *domain.Membership
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.Membership) (*domain.Membership, error)); ok {
		return rf(membership)
	}
	if rf, ok := ret.Get(0).(func(*domain.Membership) *domain.Membership); ok {
		r0 = rf(membership)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Membership)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.Membership) error); ok {
		r1 = rf(membership)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *MembershipRepository) Delete(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields:
func (_m *MembershipRepository) FindAll() ([]domain.Membership, int, error) {
	ret := _m.Called()

	var r0 []domain.Membership
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func() ([]domain.Membership, int, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []domain.Membership); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Membership)
		}
	}

	if rf, ok := ret.Get(1).(func() int); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FindById provides a mock function with given fields: id
func (_m *MembershipRepository) FindById(id int) (*domain.Membership, error) {
	ret := _m.Called(id)

	var r0 *domain.Membership
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*domain.Membership, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *domain.Membership); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Membership)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByName provides a mock function with given fields: name
func (_m *MembershipRepository) FindByName(name string) (*domain.Membership, error) {
	ret := _m.Called(name)

	var r0 *domain.Membership
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.Membership, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.Membership); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Membership)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByPhoneNumber provides a mock function with given fields: phoneNumber
func (_m *MembershipRepository) FindByPhoneNumber(phoneNumber string) (*domain.Membership, error) {
	ret := _m.Called(phoneNumber)

	var r0 *domain.Membership
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.Membership, error)); ok {
		return rf(phoneNumber)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.Membership); ok {
		r0 = rf(phoneNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Membership)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(phoneNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindTopMember provides a mock function with given fields:
func (_m *MembershipRepository) FindTopMember() ([]domain.Membership, error) {
	ret := _m.Called()

	var r0 []domain.Membership
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]domain.Membership, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []domain.Membership); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Membership)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: membership, id
func (_m *MembershipRepository) Update(membership *domain.Membership, id int) (*domain.Membership, error) {
	ret := _m.Called(membership, id)

	var r0 *domain.Membership
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.Membership, int) (*domain.Membership, error)); ok {
		return rf(membership, id)
	}
	if rf, ok := ret.Get(0).(func(*domain.Membership, int) *domain.Membership); ok {
		r0 = rf(membership, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Membership)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.Membership, int) error); ok {
		r1 = rf(membership, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePoint provides a mock function with given fields: tx, membership
func (_m *MembershipRepository) UpdatePoint(tx *gorm.DB, membership *domain.Membership) error {
	ret := _m.Called(tx, membership)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, *domain.Membership) error); ok {
		r0 = rf(tx, membership)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePointNoTx provides a mock function with given fields: membership, id
func (_m *MembershipRepository) UpdatePointNoTx(membership *domain.Membership, id int) (*domain.Membership, error) {
	ret := _m.Called(membership, id)

	var r0 *domain.Membership
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.Membership, int) (*domain.Membership, error)); ok {
		return rf(membership, id)
	}
	if rf, ok := ret.Get(0).(func(*domain.Membership, int) *domain.Membership); ok {
		r0 = rf(membership, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Membership)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.Membership, int) error); ok {
		r1 = rf(membership, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMembershipRepository creates a new instance of MembershipRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMembershipRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MembershipRepository {
	mock := &MembershipRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
