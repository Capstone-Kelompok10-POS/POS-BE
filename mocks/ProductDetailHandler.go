// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	echo "github.com/labstack/echo/v4"

	mock "github.com/stretchr/testify/mock"
)

// ProductDetailHandler is an autogenerated mock type for the ProductDetailHandler type
type ProductDetailHandler struct {
	mock.Mock
}

// CreateProductDetailHandler provides a mock function with given fields: ctx
func (_m *ProductDetailHandler) CreateProductDetailHandler(ctx echo.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteProductDetailHandler provides a mock function with given fields: ctx
func (_m *ProductDetailHandler) DeleteProductDetailHandler(ctx echo.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetProductDetailHandler provides a mock function with given fields: ctx
func (_m *ProductDetailHandler) GetProductDetailHandler(ctx echo.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetProductDetailsByProductIdHandler provides a mock function with given fields: ctx
func (_m *ProductDetailHandler) GetProductDetailsByProductIdHandler(ctx echo.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetProductDetailsHandler provides a mock function with given fields: ctx
func (_m *ProductDetailHandler) GetProductDetailsHandler(ctx echo.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateProductDetailHandler provides a mock function with given fields: ctx
func (_m *ProductDetailHandler) UpdateProductDetailHandler(ctx echo.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewProductDetailHandler creates a new instance of ProductDetailHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProductDetailHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProductDetailHandler {
	mock := &ProductDetailHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
