// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	domain "qbills/models/domain"

	echo "github.com/labstack/echo/v4"

	mock "github.com/stretchr/testify/mock"

	web "qbills/models/web"
)

// MembershipService is an autogenerated mock type for the MembershipService type
type MembershipService struct {
	mock.Mock
}

// CreateMembership provides a mock function with given fields: ctx, request
func (_m *MembershipService) CreateMembership(ctx echo.Context, request web.MembershipCreateRequest) (*domain.Membership, error) {
	ret := _m.Called(ctx, request)

	var r0 *domain.Membership
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, web.MembershipCreateRequest) (*domain.Membership, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, web.MembershipCreateRequest) *domain.Membership); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Membership)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, web.MembershipCreateRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteMembership provides a mock function with given fields: id
func (_m *MembershipService) DeleteMembership(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields:
func (_m *MembershipService) FindAll() ([]domain.Membership, int, error) {
	ret := _m.Called()

	var r0 []domain.Membership
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func() ([]domain.Membership, int, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []domain.Membership); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Membership)
		}
	}

	if rf, ok := ret.Get(1).(func() int); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FindById provides a mock function with given fields: id
func (_m *MembershipService) FindById(id int) (*domain.Membership, error) {
	ret := _m.Called(id)

	var r0 *domain.Membership
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*domain.Membership, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *domain.Membership); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Membership)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByName provides a mock function with given fields: name
func (_m *MembershipService) FindByName(name string) (*domain.Membership, error) {
	ret := _m.Called(name)

	var r0 *domain.Membership
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.Membership, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.Membership); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Membership)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByPhoneNumber provides a mock function with given fields: phoneNumber
func (_m *MembershipService) FindByPhoneNumber(phoneNumber string) (*domain.Membership, error) {
	ret := _m.Called(phoneNumber)

	var r0 *domain.Membership
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.Membership, error)); ok {
		return rf(phoneNumber)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.Membership); ok {
		r0 = rf(phoneNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Membership)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(phoneNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindTopMember provides a mock function with given fields:
func (_m *MembershipService) FindTopMember() ([]domain.Membership, error) {
	ret := _m.Called()

	var r0 []domain.Membership
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]domain.Membership, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []domain.Membership); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Membership)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMembership provides a mock function with given fields: ctx, request, id
func (_m *MembershipService) UpdateMembership(ctx echo.Context, request web.MembershipUpdateRequest, id int) (*domain.Membership, error) {
	ret := _m.Called(ctx, request, id)

	var r0 *domain.Membership
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, web.MembershipUpdateRequest, int) (*domain.Membership, error)); ok {
		return rf(ctx, request, id)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, web.MembershipUpdateRequest, int) *domain.Membership); ok {
		r0 = rf(ctx, request, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Membership)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, web.MembershipUpdateRequest, int) error); ok {
		r1 = rf(ctx, request, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMembershipService creates a new instance of MembershipService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMembershipService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MembershipService {
	mock := &MembershipService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
