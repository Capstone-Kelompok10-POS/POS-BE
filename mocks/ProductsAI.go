// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// ProductsAI is an autogenerated mock type for the ProductsAI type
type ProductsAI struct {
	mock.Mock
}

// ProductAI provides a mock function with given fields: productMap, openAIKey, userInput
func (_m *ProductsAI) ProductAI(productMap string, openAIKey string, userInput string) (string, error) {
	ret := _m.Called(productMap, openAIKey, userInput)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (string, error)); ok {
		return rf(productMap, openAIKey, userInput)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) string); ok {
		r0 = rf(productMap, openAIKey, userInput)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(productMap, openAIKey, userInput)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewProductsAI creates a new instance of ProductsAI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProductsAI(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProductsAI {
	mock := &ProductsAI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
