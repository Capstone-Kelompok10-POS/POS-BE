// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	echo "github.com/labstack/echo/v4"

	helpers "qbills/utils/helpers"

	mock "github.com/stretchr/testify/mock"
)

// ProductHandler is an autogenerated mock type for the ProductHandler type
type ProductHandler struct {
	mock.Mock
}

// CreateProductHandler provides a mock function with given fields: ctx
func (_m *ProductHandler) CreateProductHandler(ctx echo.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteProductHandler provides a mock function with given fields: ctx
func (_m *ProductHandler) DeleteProductHandler(ctx echo.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindPaginationProduct provides a mock function with given fields: ctx
func (_m *ProductHandler) FindPaginationProduct(ctx echo.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetBestProductsHandler provides a mock function with given fields: ctx
func (_m *ProductHandler) GetBestProductsHandler(ctx echo.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetProductByCategoryHandler provides a mock function with given fields: ctx
func (_m *ProductHandler) GetProductByCategoryHandler(ctx echo.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetProductByNameHandler provides a mock function with given fields: ctx
func (_m *ProductHandler) GetProductByNameHandler(ctx echo.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetProductHandler provides a mock function with given fields: ctx
func (_m *ProductHandler) GetProductHandler(ctx echo.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetProductNames provides a mock function with given fields: ctx
func (_m *ProductHandler) GetProductNames(ctx echo.Context) (map[uint]helpers.ProductDataAIRecommended, error) {
	ret := _m.Called(ctx)

	var r0 map[uint]helpers.ProductDataAIRecommended
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context) (map[uint]helpers.ProductDataAIRecommended, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(echo.Context) map[uint]helpers.ProductDataAIRecommended); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[uint]helpers.ProductDataAIRecommended)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductsHandler provides a mock function with given fields: ctx
func (_m *ProductHandler) GetProductsHandler(ctx echo.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProductAIHandler provides a mock function with given fields: ctx
func (_m *ProductHandler) ProductAIHandler(ctx echo.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateProductHandler provides a mock function with given fields: ctx
func (_m *ProductHandler) UpdateProductHandler(ctx echo.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewProductHandler creates a new instance of ProductHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProductHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProductHandler {
	mock := &ProductHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
