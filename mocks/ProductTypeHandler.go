// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	echo "github.com/labstack/echo/v4"

	mock "github.com/stretchr/testify/mock"
)

// ProductTypeHandler is an autogenerated mock type for the ProductTypeHandler type
type ProductTypeHandler struct {
	mock.Mock
}

// CreateProductTypeHandler provides a mock function with given fields: ctx
func (_m *ProductTypeHandler) CreateProductTypeHandler(ctx echo.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteProductTypeHandler provides a mock function with given fields: ctx
func (_m *ProductTypeHandler) DeleteProductTypeHandler(ctx echo.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetProductTypeByName provides a mock function with given fields: ctx
func (_m *ProductTypeHandler) GetProductTypeByName(ctx echo.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetProductTypeHandler provides a mock function with given fields: ctx
func (_m *ProductTypeHandler) GetProductTypeHandler(ctx echo.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetProductTypesHandler provides a mock function with given fields: ctx
func (_m *ProductTypeHandler) GetProductTypesHandler(ctx echo.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateProductTypeHandler provides a mock function with given fields: ctx
func (_m *ProductTypeHandler) UpdateProductTypeHandler(ctx echo.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewProductTypeHandler creates a new instance of ProductTypeHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProductTypeHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProductTypeHandler {
	mock := &ProductTypeHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
