// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	domain "qbills/models/domain"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"
)

// MembershipPointRepository is an autogenerated mock type for the MembershipPointRepository type
type MembershipPointRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: tx, point
func (_m *MembershipPointRepository) Create(tx *gorm.DB, point *domain.MembershipPoint) (*domain.MembershipPoint, error) {
	ret := _m.Called(tx, point)

	var r0 *domain.MembershipPoint
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, *domain.MembershipPoint) (*domain.MembershipPoint, error)); ok {
		return rf(tx, point)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, *domain.MembershipPoint) *domain.MembershipPoint); ok {
		r0 = rf(tx, point)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.MembershipPoint)
		}
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, *domain.MembershipPoint) error); ok {
		r1 = rf(tx, point)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAllByMembershipId provides a mock function with given fields: membershipId
func (_m *MembershipPointRepository) FindAllByMembershipId(membershipId uint) ([]domain.MembershipPoint, error) {
	ret := _m.Called(membershipId)

	var r0 []domain.MembershipPoint
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) ([]domain.MembershipPoint, error)); ok {
		return rf(membershipId)
	}
	if rf, ok := ret.Get(0).(func(uint) []domain.MembershipPoint); ok {
		r0 = rf(membershipId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.MembershipPoint)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(membershipId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindById provides a mock function with given fields: id
func (_m *MembershipPointRepository) FindById(id uint) (*domain.MembershipPoint, error) {
	ret := _m.Called(id)

	var r0 *domain.MembershipPoint
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*domain.MembershipPoint, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *domain.MembershipPoint); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.MembershipPoint)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindDecreasePoint provides a mock function with given fields:
func (_m *MembershipPointRepository) FindDecreasePoint() ([]domain.MembershipPoint, error) {
	ret := _m.Called()

	var r0 []domain.MembershipPoint
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]domain.MembershipPoint, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []domain.MembershipPoint); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.MembershipPoint)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindIncreasePoint provides a mock function with given fields:
func (_m *MembershipPointRepository) FindIncreasePoint() ([]domain.MembershipPoint, error) {
	ret := _m.Called()

	var r0 []domain.MembershipPoint
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]domain.MembershipPoint, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []domain.MembershipPoint); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.MembershipPoint)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: point, id
func (_m *MembershipPointRepository) Update(point *domain.MembershipPoint, id int) (*domain.MembershipPoint, error) {
	ret := _m.Called(point, id)

	var r0 *domain.MembershipPoint
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.MembershipPoint, int) (*domain.MembershipPoint, error)); ok {
		return rf(point, id)
	}
	if rf, ok := ret.Get(0).(func(*domain.MembershipPoint, int) *domain.MembershipPoint); ok {
		r0 = rf(point, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.MembershipPoint)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.MembershipPoint, int) error); ok {
		r1 = rf(point, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMembershipPointRepository creates a new instance of MembershipPointRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMembershipPointRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MembershipPointRepository {
	mock := &MembershipPointRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
