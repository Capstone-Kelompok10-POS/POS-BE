// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	domain "qbills/models/domain"

	echo "github.com/labstack/echo/v4"

	mock "github.com/stretchr/testify/mock"

	web "qbills/models/web"
)

// ProductTypeService is an autogenerated mock type for the ProductTypeService type
type ProductTypeService struct {
	mock.Mock
}

// CreateProductType provides a mock function with given fields: ctx, request
func (_m *ProductTypeService) CreateProductType(ctx echo.Context, request web.ProductTypeCreate) (*domain.ProductType, error) {
	ret := _m.Called(ctx, request)

	var r0 *domain.ProductType
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, web.ProductTypeCreate) (*domain.ProductType, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, web.ProductTypeCreate) *domain.ProductType); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ProductType)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, web.ProductTypeCreate) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProductType provides a mock function with given fields: ctx, id
func (_m *ProductTypeService) DeleteProductType(ctx echo.Context, id uint) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context, uint) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields: ctx
func (_m *ProductTypeService) FindAll(ctx echo.Context) ([]domain.ProductType, error) {
	ret := _m.Called(ctx)

	var r0 []domain.ProductType
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context) ([]domain.ProductType, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(echo.Context) []domain.ProductType); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.ProductType)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindById provides a mock function with given fields: ctx, id
func (_m *ProductTypeService) FindById(ctx echo.Context, id uint) (*domain.ProductType, error) {
	ret := _m.Called(ctx, id)

	var r0 *domain.ProductType
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, uint) (*domain.ProductType, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, uint) *domain.ProductType); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ProductType)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByName provides a mock function with given fields: ctx, name
func (_m *ProductTypeService) FindByName(ctx echo.Context, name string) (*domain.ProductType, error) {
	ret := _m.Called(ctx, name)

	var r0 *domain.ProductType
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, string) (*domain.ProductType, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, string) *domain.ProductType); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ProductType)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProductType provides a mock function with given fields: ctx, request, id
func (_m *ProductTypeService) UpdateProductType(ctx echo.Context, request web.ProductTypeUpdate, id uint) (*domain.ProductType, error) {
	ret := _m.Called(ctx, request, id)

	var r0 *domain.ProductType
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, web.ProductTypeUpdate, uint) (*domain.ProductType, error)); ok {
		return rf(ctx, request, id)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, web.ProductTypeUpdate, uint) *domain.ProductType); ok {
		r0 = rf(ctx, request, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ProductType)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, web.ProductTypeUpdate, uint) error); ok {
		r1 = rf(ctx, request, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewProductTypeService creates a new instance of ProductTypeService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProductTypeService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProductTypeService {
	mock := &ProductTypeService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
