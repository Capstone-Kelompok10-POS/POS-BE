// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	domain "qbills/models/domain"

	echo "github.com/labstack/echo/v4"

	helpers "qbills/utils/helpers"

	mock "github.com/stretchr/testify/mock"

	web "qbills/models/web"
)

// ProductService is an autogenerated mock type for the ProductService type
type ProductService struct {
	mock.Mock
}

// CreateProductService provides a mock function with given fields: ctx, request
func (_m *ProductService) CreateProductService(ctx echo.Context, request web.ProductCreateRequest) (*domain.Product, error) {
	ret := _m.Called(ctx, request)

	var r0 *domain.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, web.ProductCreateRequest) (*domain.Product, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, web.ProductCreateRequest) *domain.Product); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, web.ProductCreateRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProductService provides a mock function with given fields: ctx, id
func (_m *ProductService) DeleteProductService(ctx echo.Context, id uint) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context, uint) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAllProductService provides a mock function with given fields: ctx
func (_m *ProductService) FindAllProductService(ctx echo.Context) ([]domain.Product, int, error) {
	ret := _m.Called(ctx)

	var r0 []domain.Product
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(echo.Context) ([]domain.Product, int, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(echo.Context) []domain.Product); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context) int); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(echo.Context) error); ok {
		r2 = rf(ctx)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FindBestSellingProduct provides a mock function with given fields:
func (_m *ProductService) FindBestSellingProduct() ([]domain.BestSellingProduct, error) {
	ret := _m.Called()

	var r0 []domain.BestSellingProduct
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]domain.BestSellingProduct, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []domain.BestSellingProduct); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.BestSellingProduct)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByCategoryProductService provides a mock function with given fields: ctx, productTypeID
func (_m *ProductService) FindByCategoryProductService(ctx echo.Context, productTypeID uint) ([]domain.Product, error) {
	ret := _m.Called(ctx, productTypeID)

	var r0 []domain.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, uint) ([]domain.Product, error)); ok {
		return rf(ctx, productTypeID)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, uint) []domain.Product); ok {
		r0 = rf(ctx, productTypeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, uint) error); ok {
		r1 = rf(ctx, productTypeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByIdProductService provides a mock function with given fields: ctx, id
func (_m *ProductService) FindByIdProductService(ctx echo.Context, id uint) (*domain.Product, error) {
	ret := _m.Called(ctx, id)

	var r0 *domain.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, uint) (*domain.Product, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, uint) *domain.Product); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByNameProductService provides a mock function with given fields: ctx, name
func (_m *ProductService) FindByNameProductService(ctx echo.Context, name string) ([]domain.Product, error) {
	ret := _m.Called(ctx, name)

	var r0 []domain.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, string) ([]domain.Product, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, string) []domain.Product); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindPaginationProduct provides a mock function with given fields: ctx
func (_m *ProductService) FindPaginationProduct(ctx echo.Context) ([]domain.Product, *helpers.Pagination, error) {
	ret := _m.Called(ctx)

	var r0 []domain.Product
	var r1 *helpers.Pagination
	var r2 error
	if rf, ok := ret.Get(0).(func(echo.Context) ([]domain.Product, *helpers.Pagination, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(echo.Context) []domain.Product); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context) *helpers.Pagination); ok {
		r1 = rf(ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*helpers.Pagination)
		}
	}

	if rf, ok := ret.Get(2).(func(echo.Context) error); ok {
		r2 = rf(ctx)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateProductService provides a mock function with given fields: ctx, request, id
func (_m *ProductService) UpdateProductService(ctx echo.Context, request web.ProductUpdateRequest, id uint) (*domain.Product, error) {
	ret := _m.Called(ctx, request, id)

	var r0 *domain.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, web.ProductUpdateRequest, uint) (*domain.Product, error)); ok {
		return rf(ctx, request, id)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, web.ProductUpdateRequest, uint) *domain.Product); ok {
		r0 = rf(ctx, request, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, web.ProductUpdateRequest, uint) error); ok {
		r1 = rf(ctx, request, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewProductService creates a new instance of ProductService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProductService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProductService {
	mock := &ProductService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
