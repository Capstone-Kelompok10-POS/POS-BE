// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	domain "qbills/models/domain"

	mock "github.com/stretchr/testify/mock"
)

// StockRepository is an autogenerated mock type for the StockRepository type
type StockRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: stock
func (_m *StockRepository) Create(stock *domain.Stock) (*domain.Stock, error) {
	ret := _m.Called(stock)

	var r0 *domain.Stock
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.Stock) (*domain.Stock, error)); ok {
		return rf(stock)
	}
	if rf, ok := ret.Get(0).(func(*domain.Stock) *domain.Stock); ok {
		r0 = rf(stock)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Stock)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.Stock) error); ok {
		r1 = rf(stock)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAll provides a mock function with given fields:
func (_m *StockRepository) FindAll() ([]domain.Stock, error) {
	ret := _m.Called()

	var r0 []domain.Stock
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]domain.Stock, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []domain.Stock); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Stock)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindById provides a mock function with given fields: id
func (_m *StockRepository) FindById(id uint) (*domain.Stock, error) {
	ret := _m.Called(id)

	var r0 *domain.Stock
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*domain.Stock, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *domain.Stock); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Stock)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindDecreaseStock provides a mock function with given fields:
func (_m *StockRepository) FindDecreaseStock() ([]domain.Stock, error) {
	ret := _m.Called()

	var r0 []domain.Stock
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]domain.Stock, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []domain.Stock); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Stock)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindIncreaseStock provides a mock function with given fields:
func (_m *StockRepository) FindIncreaseStock() ([]domain.Stock, error) {
	ret := _m.Called()

	var r0 []domain.Stock
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]domain.Stock, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []domain.Stock); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Stock)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewStockRepository creates a new instance of StockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *StockRepository {
	mock := &StockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
