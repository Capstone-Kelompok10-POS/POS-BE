// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	domain "qbills/models/domain"

	mock "github.com/stretchr/testify/mock"
)

// PaymentMethodRepository is an autogenerated mock type for the PaymentMethodRepository type
type PaymentMethodRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: paymentMethod
func (_m *PaymentMethodRepository) Create(paymentMethod *domain.PaymentMethod) (*domain.PaymentMethod, error) {
	ret := _m.Called(paymentMethod)

	var r0 *domain.PaymentMethod
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.PaymentMethod) (*domain.PaymentMethod, error)); ok {
		return rf(paymentMethod)
	}
	if rf, ok := ret.Get(0).(func(*domain.PaymentMethod) *domain.PaymentMethod); ok {
		r0 = rf(paymentMethod)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PaymentMethod)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.PaymentMethod) error); ok {
		r1 = rf(paymentMethod)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *PaymentMethodRepository) Delete(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields:
func (_m *PaymentMethodRepository) FindAll() ([]domain.PaymentMethod, error) {
	ret := _m.Called()

	var r0 []domain.PaymentMethod
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]domain.PaymentMethod, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []domain.PaymentMethod); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.PaymentMethod)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindById provides a mock function with given fields: id
func (_m *PaymentMethodRepository) FindById(id int) (*domain.PaymentMethod, error) {
	ret := _m.Called(id)

	var r0 *domain.PaymentMethod
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*domain.PaymentMethod, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *domain.PaymentMethod); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PaymentMethod)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByName provides a mock function with given fields: name
func (_m *PaymentMethodRepository) FindByName(name string) (*domain.PaymentMethod, error) {
	ret := _m.Called(name)

	var r0 *domain.PaymentMethod
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.PaymentMethod, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.PaymentMethod); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PaymentMethod)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: paymentMethod, id
func (_m *PaymentMethodRepository) Update(paymentMethod *domain.PaymentMethod, id int) (*domain.PaymentMethod, error) {
	ret := _m.Called(paymentMethod, id)

	var r0 *domain.PaymentMethod
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.PaymentMethod, int) (*domain.PaymentMethod, error)); ok {
		return rf(paymentMethod, id)
	}
	if rf, ok := ret.Get(0).(func(*domain.PaymentMethod, int) *domain.PaymentMethod); ok {
		r0 = rf(paymentMethod, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PaymentMethod)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.PaymentMethod, int) error); ok {
		r1 = rf(paymentMethod, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPaymentMethodRepository creates a new instance of PaymentMethodRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPaymentMethodRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *PaymentMethodRepository {
	mock := &PaymentMethodRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
