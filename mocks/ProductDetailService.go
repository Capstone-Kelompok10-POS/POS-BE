// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	domain "qbills/models/domain"

	echo "github.com/labstack/echo/v4"

	mock "github.com/stretchr/testify/mock"

	web "qbills/models/web"
)

// ProductDetailService is an autogenerated mock type for the ProductDetailService type
type ProductDetailService struct {
	mock.Mock
}

// CreateProductDetail provides a mock function with given fields: ctx, request
func (_m *ProductDetailService) CreateProductDetail(ctx echo.Context, request web.ProductDetailCreate) (*domain.ProductDetail, error) {
	ret := _m.Called(ctx, request)

	var r0 *domain.ProductDetail
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, web.ProductDetailCreate) (*domain.ProductDetail, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, web.ProductDetailCreate) *domain.ProductDetail); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ProductDetail)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, web.ProductDetailCreate) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProductDetail provides a mock function with given fields: ctx, id
func (_m *ProductDetailService) DeleteProductDetail(ctx echo.Context, id uint) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context, uint) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields: ctx
func (_m *ProductDetailService) FindAll(ctx echo.Context) ([]domain.ProductDetail, error) {
	ret := _m.Called(ctx)

	var r0 []domain.ProductDetail
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context) ([]domain.ProductDetail, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(echo.Context) []domain.ProductDetail); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.ProductDetail)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindById provides a mock function with given fields: ctx, id
func (_m *ProductDetailService) FindById(ctx echo.Context, id uint) (*domain.ProductDetail, error) {
	ret := _m.Called(ctx, id)

	var r0 *domain.ProductDetail
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, uint) (*domain.ProductDetail, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, uint) *domain.ProductDetail); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ProductDetail)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByProductId provides a mock function with given fields: ctx, productId
func (_m *ProductDetailService) FindByProductId(ctx echo.Context, productId uint) ([]domain.ProductDetail, error) {
	ret := _m.Called(ctx, productId)

	var r0 []domain.ProductDetail
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, uint) ([]domain.ProductDetail, error)); ok {
		return rf(ctx, productId)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, uint) []domain.ProductDetail); ok {
		r0 = rf(ctx, productId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.ProductDetail)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, uint) error); ok {
		r1 = rf(ctx, productId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProductDetail provides a mock function with given fields: ctx, request, id
func (_m *ProductDetailService) UpdateProductDetail(ctx echo.Context, request web.ProductDetailCreate, id uint) (*domain.ProductDetail, error) {
	ret := _m.Called(ctx, request, id)

	var r0 *domain.ProductDetail
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, web.ProductDetailCreate, uint) (*domain.ProductDetail, error)); ok {
		return rf(ctx, request, id)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, web.ProductDetailCreate, uint) *domain.ProductDetail); ok {
		r0 = rf(ctx, request, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ProductDetail)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, web.ProductDetailCreate, uint) error); ok {
		r1 = rf(ctx, request, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewProductDetailService creates a new instance of ProductDetailService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProductDetailService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProductDetailService {
	mock := &ProductDetailService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
