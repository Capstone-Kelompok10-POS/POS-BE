// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	domain "qbills/models/domain"

	echo "github.com/labstack/echo/v4"

	mock "github.com/stretchr/testify/mock"

	web "qbills/models/web"
)

// PaymentMethodService is an autogenerated mock type for the PaymentMethodService type
type PaymentMethodService struct {
	mock.Mock
}

// CreatePaymentMethod provides a mock function with given fields: ctx, request
func (_m *PaymentMethodService) CreatePaymentMethod(ctx echo.Context, request web.PaymentMethodRequest) (*domain.PaymentMethod, error) {
	ret := _m.Called(ctx, request)

	var r0 *domain.PaymentMethod
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, web.PaymentMethodRequest) (*domain.PaymentMethod, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, web.PaymentMethodRequest) *domain.PaymentMethod); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PaymentMethod)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, web.PaymentMethodRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePaymentMethod provides a mock function with given fields: ctx, id
func (_m *PaymentMethodService) DeletePaymentMethod(ctx echo.Context, id int) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields: ctx
func (_m *PaymentMethodService) FindAll(ctx echo.Context) ([]domain.PaymentMethod, error) {
	ret := _m.Called(ctx)

	var r0 []domain.PaymentMethod
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context) ([]domain.PaymentMethod, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(echo.Context) []domain.PaymentMethod); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.PaymentMethod)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindById provides a mock function with given fields: ctx, id
func (_m *PaymentMethodService) FindById(ctx echo.Context, id int) (*domain.PaymentMethod, error) {
	ret := _m.Called(ctx, id)

	var r0 *domain.PaymentMethod
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, int) (*domain.PaymentMethod, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, int) *domain.PaymentMethod); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PaymentMethod)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByName provides a mock function with given fields: ctx, name
func (_m *PaymentMethodService) FindByName(ctx echo.Context, name string) (*domain.PaymentMethod, error) {
	ret := _m.Called(ctx, name)

	var r0 *domain.PaymentMethod
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, string) (*domain.PaymentMethod, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, string) *domain.PaymentMethod); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PaymentMethod)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePaymentMethod provides a mock function with given fields: ctx, request, id
func (_m *PaymentMethodService) UpdatePaymentMethod(ctx echo.Context, request web.PaymentMethodRequest, id int) (*domain.PaymentMethod, error) {
	ret := _m.Called(ctx, request, id)

	var r0 *domain.PaymentMethod
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, web.PaymentMethodRequest, int) (*domain.PaymentMethod, error)); ok {
		return rf(ctx, request, id)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, web.PaymentMethodRequest, int) *domain.PaymentMethod); ok {
		r0 = rf(ctx, request, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PaymentMethod)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, web.PaymentMethodRequest, int) error); ok {
		r1 = rf(ctx, request, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPaymentMethodService creates a new instance of PaymentMethodService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPaymentMethodService(t interface {
	mock.TestingT
	Cleanup(func())
}) *PaymentMethodService {
	mock := &PaymentMethodService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
