// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	domain "qbills/models/domain"

	echo "github.com/labstack/echo/v4"

	mock "github.com/stretchr/testify/mock"

	web "qbills/models/web"
)

// PaymentTypeService is an autogenerated mock type for the PaymentTypeService type
type PaymentTypeService struct {
	mock.Mock
}

// CreatePaymentType provides a mock function with given fields: ctx, request
func (_m *PaymentTypeService) CreatePaymentType(ctx echo.Context, request web.PaymentTypeRequest) (*domain.PaymentType, error) {
	ret := _m.Called(ctx, request)

	var r0 *domain.PaymentType
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, web.PaymentTypeRequest) (*domain.PaymentType, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, web.PaymentTypeRequest) *domain.PaymentType); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PaymentType)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, web.PaymentTypeRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePaymentType provides a mock function with given fields: ctx, id
func (_m *PaymentTypeService) DeletePaymentType(ctx echo.Context, id int) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields: ctx
func (_m *PaymentTypeService) FindAll(ctx echo.Context) ([]domain.PaymentType, error) {
	ret := _m.Called(ctx)

	var r0 []domain.PaymentType
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context) ([]domain.PaymentType, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(echo.Context) []domain.PaymentType); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.PaymentType)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindById provides a mock function with given fields: ctx, id
func (_m *PaymentTypeService) FindById(ctx echo.Context, id int) (*domain.PaymentType, error) {
	ret := _m.Called(ctx, id)

	var r0 *domain.PaymentType
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, int) (*domain.PaymentType, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, int) *domain.PaymentType); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PaymentType)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByName provides a mock function with given fields: ctx, name
func (_m *PaymentTypeService) FindByName(ctx echo.Context, name string) (*domain.PaymentType, error) {
	ret := _m.Called(ctx, name)

	var r0 *domain.PaymentType
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, string) (*domain.PaymentType, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, string) *domain.PaymentType); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PaymentType)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePaymentType provides a mock function with given fields: ctx, request, id
func (_m *PaymentTypeService) UpdatePaymentType(ctx echo.Context, request web.PaymentTypeRequest, id int) (*domain.PaymentType, error) {
	ret := _m.Called(ctx, request, id)

	var r0 *domain.PaymentType
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, web.PaymentTypeRequest, int) (*domain.PaymentType, error)); ok {
		return rf(ctx, request, id)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, web.PaymentTypeRequest, int) *domain.PaymentType); ok {
		r0 = rf(ctx, request, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PaymentType)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, web.PaymentTypeRequest, int) error); ok {
		r1 = rf(ctx, request, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPaymentTypeService creates a new instance of PaymentTypeService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPaymentTypeService(t interface {
	mock.TestingT
	Cleanup(func())
}) *PaymentTypeService {
	mock := &PaymentTypeService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
