// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	domain "qbills/models/domain"

	mock "github.com/stretchr/testify/mock"
)

// ProductTypeRepository is an autogenerated mock type for the ProductTypeRepository type
type ProductTypeRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: productType
func (_m *ProductTypeRepository) Create(productType *domain.ProductType) (*domain.ProductType, error) {
	ret := _m.Called(productType)

	var r0 *domain.ProductType
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.ProductType) (*domain.ProductType, error)); ok {
		return rf(productType)
	}
	if rf, ok := ret.Get(0).(func(*domain.ProductType) *domain.ProductType); ok {
		r0 = rf(productType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ProductType)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.ProductType) error); ok {
		r1 = rf(productType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *ProductTypeRepository) Delete(id uint) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields:
func (_m *ProductTypeRepository) FindAll() ([]domain.ProductType, error) {
	ret := _m.Called()

	var r0 []domain.ProductType
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]domain.ProductType, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []domain.ProductType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.ProductType)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindById provides a mock function with given fields: id
func (_m *ProductTypeRepository) FindById(id uint) (*domain.ProductType, error) {
	ret := _m.Called(id)

	var r0 *domain.ProductType
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*domain.ProductType, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *domain.ProductType); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ProductType)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByName provides a mock function with given fields: name
func (_m *ProductTypeRepository) FindByName(name string) (*domain.ProductType, error) {
	ret := _m.Called(name)

	var r0 *domain.ProductType
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.ProductType, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.ProductType); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ProductType)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: productType, id
func (_m *ProductTypeRepository) Update(productType *domain.ProductType, id uint) (*domain.ProductType, error) {
	ret := _m.Called(productType, id)

	var r0 *domain.ProductType
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.ProductType, uint) (*domain.ProductType, error)); ok {
		return rf(productType, id)
	}
	if rf, ok := ret.Get(0).(func(*domain.ProductType, uint) *domain.ProductType); ok {
		r0 = rf(productType, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ProductType)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.ProductType, uint) error); ok {
		r1 = rf(productType, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewProductTypeRepository creates a new instance of ProductTypeRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProductTypeRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProductTypeRepository {
	mock := &ProductTypeRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
