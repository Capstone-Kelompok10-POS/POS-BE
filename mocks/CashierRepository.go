// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	domain "qbills/models/domain"

	mock "github.com/stretchr/testify/mock"
)

// CashierRepository is an autogenerated mock type for the CashierRepository type
type CashierRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: cashier
func (_m *CashierRepository) Create(cashier *domain.Cashier) (*domain.Cashier, error) {
	ret := _m.Called(cashier)

	var r0 *domain.Cashier
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.Cashier) (*domain.Cashier, error)); ok {
		return rf(cashier)
	}
	if rf, ok := ret.Get(0).(func(*domain.Cashier) *domain.Cashier); ok {
		r0 = rf(cashier)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Cashier)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.Cashier) error); ok {
		r1 = rf(cashier)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *CashierRepository) Delete(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields:
func (_m *CashierRepository) FindAll() ([]domain.Cashier, int, error) {
	ret := _m.Called()

	var r0 []domain.Cashier
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func() ([]domain.Cashier, int, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []domain.Cashier); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Cashier)
		}
	}

	if rf, ok := ret.Get(1).(func() int); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FindById provides a mock function with given fields: id
func (_m *CashierRepository) FindById(id int) (*domain.Cashier, error) {
	ret := _m.Called(id)

	var r0 *domain.Cashier
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*domain.Cashier, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *domain.Cashier); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Cashier)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByUsername provides a mock function with given fields: username
func (_m *CashierRepository) FindByUsername(username string) (*domain.Cashier, error) {
	ret := _m.Called(username)

	var r0 *domain.Cashier
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.Cashier, error)); ok {
		return rf(username)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.Cashier); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Cashier)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: cashier, id
func (_m *CashierRepository) Update(cashier *domain.Cashier, id int) (*domain.Cashier, error) {
	ret := _m.Called(cashier, id)

	var r0 *domain.Cashier
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.Cashier, int) (*domain.Cashier, error)); ok {
		return rf(cashier, id)
	}
	if rf, ok := ret.Get(0).(func(*domain.Cashier, int) *domain.Cashier); ok {
		r0 = rf(cashier, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Cashier)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.Cashier, int) error); ok {
		r1 = rf(cashier, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCashierRepository creates a new instance of CashierRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCashierRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *CashierRepository {
	mock := &CashierRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
