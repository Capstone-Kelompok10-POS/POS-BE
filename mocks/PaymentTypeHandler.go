// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	echo "github.com/labstack/echo/v4"

	mock "github.com/stretchr/testify/mock"
)

// PaymentTypeHandler is an autogenerated mock type for the PaymentTypeHandler type
type PaymentTypeHandler struct {
	mock.Mock
}

// CreatePaymentTypeHandler provides a mock function with given fields: ctx
func (_m *PaymentTypeHandler) CreatePaymentTypeHandler(ctx echo.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeletePaymentTypeHandler provides a mock function with given fields: ctx
func (_m *PaymentTypeHandler) DeletePaymentTypeHandler(ctx echo.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPaymentTypeByNameHandler provides a mock function with given fields: ctx
func (_m *PaymentTypeHandler) GetPaymentTypeByNameHandler(ctx echo.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPaymentTypeHandler provides a mock function with given fields: ctx
func (_m *PaymentTypeHandler) GetPaymentTypeHandler(ctx echo.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPaymentTypesHandler provides a mock function with given fields: ctx
func (_m *PaymentTypeHandler) GetPaymentTypesHandler(ctx echo.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePaymentTypeHandler provides a mock function with given fields: ctx
func (_m *PaymentTypeHandler) UpdatePaymentTypeHandler(ctx echo.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewPaymentTypeHandler creates a new instance of PaymentTypeHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPaymentTypeHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *PaymentTypeHandler {
	mock := &PaymentTypeHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
